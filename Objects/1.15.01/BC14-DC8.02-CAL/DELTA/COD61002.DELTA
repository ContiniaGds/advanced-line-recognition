OBJECT Codeunit 61002 Adv. Purch. - Line Validation
{
  OBJECT-PROPERTIES
  {
    Date=20220222D;
    Time=120000T;
    Modified=true;
    Version List=ALR1.15;
  }
  PROPERTIES
  {
    TableNo="CDC Temp. Document Line";
    OnRun=BEGIN
            ALRLineValidation(Rec);
          END;

  }
  CODE
  {
    VAR
      LineAmountDiffCalcDiscAmtTxt@6085576 : TextConst 'DAN=I linje %1 er linjebel›b genkendt (%2) forskellig fra linjebel›b beregnet (%3) n†r den genkendte rabat-% (%4) benyttes til beregning af rabatbel›b (%5).;DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich in Zeile %1 vom berechneten Zeilenbetrag (%3), der mit dem erfassten Rabatt % (%4) berechnet wurde, um den Rabattbetrag (%5) zu berechnen.;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount % (%4) to calculate Discount Amount (%5) on line %1.;FRA=Le montant de la ligne captur‚e (%2) est diff‚rent du montant de la ligne calcul‚ (%3) … l''aide du % remise (%4) captur‚ pour calculer le montant de la remise (%5) … la ligne %1.;NLD=Herkend lijnbedrag (%2) is verschillend van berekend lijnbedrag (%3) met behulp van herkende korting % (%4) om korting (%5) op regel %1 te berekenen.';
      LineAmountDiffCapDiscAmtTxt@6085577 : TextConst 'DAN=I linje %1 er linjebel›b genkendt (%2) forskellig fra linjebel›b beregnet (%3) n†r det genkendte rabatbel›b (%4) benyttes.;DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich in Zeile %1 von dem berechneten Zeilenbetrag (%3), der mit dem erfassten Rabattbetrag (%4) berechnet wurde.;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount Amount (%4) on line %1.;FRA=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount Amount (%4) on line %1.;NLD=Herkend lijnbedrag (%2) is verschillend van berekend lijnbedrag (%3) met behulp van herkende korting % (%4) op regel %1.';
      LineAmountDiffTxt@6085573 : TextConst 'DAN=I linje %1 er linjebel›b genkendt (%2) forskellig fra linjebel›b beregnet (%3).;DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich vom in Zeile %1 berechneten Zeilenbetrag (%3).;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) on line %1.;FRA=Le montant de la ligne captur‚e (%2) est diff‚rent du montant de ligne calcul‚ (%3) … la ligne %1.;NLD=Herkend lijnbedrag (%2) is anders dan berekend lijnbedrag (%3) op regel %1.';
      WarningTxt@6085574 : TextConst 'DAN=ADVARSEL: %1;DEU=WARNUNG: %1;ENU=ATTENTION : %1;FRA=ATTENTION : %1;NLD=WAARSCHUWING: %1';

    [LineStart(3)]
    LOCAL PROCEDURE ALRLineValidation@1(VAR TempDocumentLine@1000 : TEMPORARY Record "CDC Temp. Document Line");
    VAR
      Document@1001 : Record "CDC Document";
      Field@1022 : Record "CDC Template Field";
      DocumentComment@1021 : Record "CDC Document Comment";
      EmptyField@1020 : Record "CDC Template Field";
      PurchDocMgt@1019 : Codeunit "CDC Purch. Doc. - Management";
      CaptureMgt@1018 : Codeunit "CDC Capture Management";
      DCAppMgt@1017 : Codeunit "CDC Approval Management";
      Quantity@1016 : Decimal;
      UnitCost@1015 : Decimal;
      LineAmount@1014 : Decimal;
      DiscAmount@1013 : Decimal;
      DiscPct@1012 : Decimal;
      LineAmount2@1011 : Decimal;
      AmountRoundingPrecision@1010 : Decimal;
      OtherCharges@1009 : Decimal;
      UnitCharge@1008 : Decimal;
      LineDescription@1007 : Text[250];
      CommentText@1006 : Text[1024];
      CurrencyCode@1004 : Code[10];
      CommentType@1003 : 'Information,Warning,Error';
    BEGIN
      if not Document.Get(TempDocumentLine."Document No.") then
        exit;

      //LineAccountNo := PurchDocMgt.GetLineAccountNo(Document,TempDocumentLine."Line No.");
      LineDescription := PurchDocMgt.GetLineDescription(Document,TempDocumentLine."Line No.");
      Quantity := PurchDocMgt.GetLineQuantity(Document,TempDocumentLine."Line No.");
      UnitCost := PurchDocMgt.GetLineUnitCost(Document,TempDocumentLine."Line No.");
      DiscPct := PurchDocMgt.GetLineDiscPct(Document,TempDocumentLine."Line No.");
      DiscAmount := PurchDocMgt.GetLineDiscAmount(Document,TempDocumentLine."Line No.");
      LineAmount := PurchDocMgt.GetLineAmount(Document,TempDocumentLine."Line No.");
      OtherCharges := PurchDocMgt.GetLineOtherCharges(Document,TempDocumentLine."Line No.");
      UnitCharge := PurchDocMgt.GetLineUnitCharge(Document,TempDocumentLine."Line No.");
      CurrencyCode := PurchDocMgt.GetCurrencyCode(Document);

      //ALR >>>
      //IF (LineAccountNo = '') AND (Quantity = 0) AND (UnitCost = 0) AND (LineAmount = 0) AND (DiscPct = 0) AND
      //  (DiscAmount = 0) AND (LineDescription = '')
      //THEN BEGIN
      //  Skip := TRUE;
      //  EXIT;
      //END;
      Field.SetRange("Template No.",TempDocumentLine."Template No.");
      Field.SetRange(Type,Field.Type::Line);
      Field.SetRange(Required,true);
      if Field.FindSet then
      repeat
        if StrLen(CaptureMgt.GetValueAsText(TempDocumentLine."Document No.",TempDocumentLine."Line No.",Field)) = 0 then
          TempDocumentLine.Skip := true;
      until Field.Next = 0;
      if TempDocumentLine.Skip then
        exit;
      //ALR <<<

      Field.SetRange(Required);
      if Field.FindSet then
        repeat
          if not CaptureMgt.IsValidValue(Field,TempDocumentLine."Document No.",TempDocumentLine."Line No.") then begin
            // No need to write an error here as an error written in C6085580 - CDC Doc. - Field Validation
            TempDocumentLine.OK := false;
            exit;
          end;
        until Field.Next = 0;

      if not DCAppMgt.GetAmountRoundingPrecision(CurrencyCode,AmountRoundingPrecision) then begin
        TempDocumentLine.OK := false;
        exit;
      end;

      LineAmount2 := Round(Quantity * (UnitCost + UnitCharge),AmountRoundingPrecision);
      LineAmount2 += Round(OtherCharges,AmountRoundingPrecision);

      if DiscAmount <> 0 then
        LineAmount2 := LineAmount2 - Round(DiscAmount,AmountRoundingPrecision)
      else
        if DiscPct <> 0 then begin
          // We are rounding the discount amount before we subtract it from LineAmount as this is how standard NAV behaves on an Invoice
          DiscAmount :=  Round(LineAmount2 * DiscPct / 100,AmountRoundingPrecision);
          LineAmount2 := LineAmount2 - DiscAmount;
        end;

      // We use AmountRoundingPrecision as any roundings should be equal to AmountRoundingPrecision. In this situation,
      // we want the used to be able to register the document.
      // When a document is registered with a rounding difference, the
      TempDocumentLine.OK := (Abs(LineAmount - LineAmount2) <= AmountRoundingPrecision);

      if TempDocumentLine."Create Comment" then
        if LineAmount <> LineAmount2 then begin
          if TempDocumentLine.OK then begin
            CommentType := CommentType::Warning;
            CommentText := WarningTxt;
          end else begin
            CommentType := CommentType::Error;
            CommentText := '%1';
          end;

          // LineAmount is Line Amount as captured/keyed in on the document line. We therefore want to show all decimals.
          if (DiscPct = 0) and (DiscAmount = 0) then
            DocumentComment.Add(Document,EmptyField,TempDocumentLine."Line No.",DocumentComment.Area::Validation,CommentType,
              StrSubstNo(CommentText,StrSubstNo(LineAmountDiffTxt,TempDocumentLine."Line No.",DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                DCAppMgt.FormatAmount(LineAmount2,CurrencyCode))))
          else
            if DiscPct <> 0 then
              DocumentComment.Add(Document,EmptyField,TempDocumentLine."Line No.",DocumentComment.Area::Validation,CommentType,
                StrSubstNo(CommentText,StrSubstNo(LineAmountDiffCalcDiscAmtTxt,TempDocumentLine."Line No.",
                  DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                  DCAppMgt.FormatAmount(LineAmount2,CurrencyCode),DiscPct,DCAppMgt.FormatAmount(DiscAmount,CurrencyCode))))
            else
              DocumentComment.Add(Document,EmptyField,TempDocumentLine."Line No.",DocumentComment.Area::Validation,CommentType,
                StrSubstNo(CommentText,StrSubstNo(LineAmountDiffCapDiscAmtTxt,TempDocumentLine."Line No.",
                  DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                  DCAppMgt.FormatAmount(LineAmount2,CurrencyCode),DCAppMgt.FormatAmount(DiscAmount,CurrencyCode))));
        end;
    END;

    [EventSubscriber(Codeunit,6085704,OnBeforeLineValidation)]
    [LineStart(97)]
    LOCAL PROCEDURE PurchLineValidation_OnBeforeLineValidation@7(VAR TempDocumentLine@1000 : Record "CDC Temp. Document Line";Document@1001 : Record "CDC Document";VAR Handled@1002 : Boolean);
    VAR
      CDCTemplate@1003 : Record "CDC Template";
    BEGIN
      if Handled then
        exit;

      if not CDCTemplate.Get(Document."Template No.") then
        exit;

      if CDCTemplate."ALR Line Validation Type" <> CDCTemplate."ALR Line Validation Type"::AdvancedLineRecognition then
        exit;

      ALRLineValidation(TempDocumentLine);
      Handled := true;
    END;

    BEGIN
    {
      This codeunit validates lines on purchase documents
    }
    END.
  }
}

